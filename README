## Run the Application

To run the application, run the following command in a terminal window (in the `complete`)
directory:

    ./gradlew bootRun

If you use Maven, run the following command in a terminal window (in the `complete`)
directory:

    ./mvnw spring-boot:run

## Test service based app
Now run the service with curl (in a separate terminal window), by running the following
command (shown with its output):

    $ curl http://localhost:8080

## Unit Tests

You will want to add a test for the endpoint you added, and Spring Test provides some
machinery for that.

If you use Gradle, add the following dependency to your `build.gradle` file:

[source,groovy,indent=0]
----
include::complete/build.gradle[tag=tests]
----

If you use Maven, add the following to your `pom.xml` file:

[source,xml,indent=0]
----
include::complete/pom.xml[tag=tests]
----

Now write a simple unit test that mocks the servlet request and response through your
endpoint, as the following listing (from
`src/test/java/com/example/springboot/HelloControllerTest.java`) shows:

====
[source,java]
----
include::complete/src/test/java/com/example/springboot/HelloControllerTest.java[]
----
====

`MockMvc` comes from Spring Test and lets you, through a set of convenient builder
classes, send HTTP requests into the `DispatcherServlet` and make assertions about the
result. Note the use of `@AutoConfigureMockMvc` and `@SpringBootTest` to inject a
`MockMvc` instance. Having used `@SpringBootTest`, we are asking for the whole application
context to be created. An alternative would be to ask Spring Boot to create only the web
layers of the context by using `@WebMvcTest`. In either case, Spring Boot automatically
tries to locate the main application class of your application, but you can override it or
narrow it down if you want to build something different.

As well as mocking the HTTP request cycle, you can also use Spring Boot to write a simple
full-stack integration test. For example, instead of (or as well as) the mock test shown
earlier, we could create the following test (from
`src/test/java/com/example/springboot/HelloControllerITest.java`):

====
[source,java]
----
include::complete/src/test/java/com/example/springboot/HelloControllerITest.java[]
----
====

The embedded server starts on a random port because of
`webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT`, and the actual port is
configured automatically in the base URL for the `TestRestTemplate`.

== Add Production-grade Services

If you are building a web site for your business, you probably need to add some management
services. Spring Boot provides several such services (such as health, audits, beans, and
more) with its
http://docs.spring.io/spring-boot/docs/{spring_boot_version}/reference/htmlsingle/#actuator[actuator module].

If you use Gradle, add the following dependency to your `build.gradle` file:

[source,groovy,indent=0]
----
include::complete/build.gradle[tag=actuator]
----

If you use Maven, add the following dependency to your `pom.xml` file:

[source,xml,indent=0]
----
include::complete/pom.xml[tag=actuator]
----

Then restart the application. If you use Gradle, run the following command in a terminal
window (in the `complete` directory):

====
[subs="attributes"]
----
./gradlew bootRun
----
====

If you use Maven, run the following command in a terminal window (in the `complete`
directory):

====
[subs="attributes"]
----
./mvnw spring-boot:run
----
====

You should see that a new set of RESTful end points have been added to the application.
These are management services provided by Spring Boot. The following listing shows typical
output:

====
[source,text]
----
management.endpoint.configprops-org.springframework.boot.actuate.autoconfigure.context.properties.ConfigurationPropertiesReportEndpointProperties
management.endpoint.env-org.springframework.boot.actuate.autoconfigure.env.EnvironmentEndpointProperties
management.endpoint.health-org.springframework.boot.actuate.autoconfigure.health.HealthEndpointProperties
management.endpoint.logfile-org.springframework.boot.actuate.autoconfigure.logging.LogFileWebEndpointProperties
management.endpoints.jmx-org.springframework.boot.actuate.autoconfigure.endpoint.jmx.JmxEndpointProperties
management.endpoints.web-org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties
management.endpoints.web.cors-org.springframework.boot.actuate.autoconfigure.endpoint.web.CorsEndpointProperties
management.health.diskspace-org.springframework.boot.actuate.autoconfigure.system.DiskSpaceHealthIndicatorProperties
management.info-org.springframework.boot.actuate.autoconfigure.info.InfoContributorProperties
management.metrics-org.springframework.boot.actuate.autoconfigure.metrics.MetricsProperties
management.metrics.export.simple-org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleProperties
management.server-org.springframework.boot.actuate.autoconfigure.web.server.ManagementServerProperties
----
====

The actuator exposes the following:

* http://localhost:8080/actuator/health[actuator/health]
* http://localhost:8080/actuator[actuator]

NOTE: There is also an `/actuator/shutdown` endpoint, but, by default, it is visible only
through JMX. To http://docs.spring.io/spring-boot/docs/{spring_boot_version}/reference/htmlsingle/#production-ready-endpoints-enabling-endpoints[enable it as an HTTP endpoint], add
`management.endpoint.shutdown.enabled=true` to your `application.properties` file
and expose it with `management.endpoints.web.exposure.include=health,info,shutdown`.
However, you probably should not enable the shutdown endpoint for a publicly available
application.

You can check the health of the application by running the following command:

====
[source,bash]
----
$ curl http://localhost:8080/actuator/health
{"status":"UP"}
----
====

You can try also to invoke shutdown through curl, to see what happens when you have not
added the necessary line (shown in the preceding note) to `application.properties`:

====
[source,bash]
----
$ curl -X POST http://localhost:8080/actuator/shutdown
{"timestamp":1401820343710,"error":"Not Found","status":404,"message":"","path":"/actuator/shutdown"}
----
====

Because we did not enable it, the requested endpoint is not available (because the endpoint does not
exist).

For more details about each of these REST endpoints and how you can tune their settings
with an `application.properties` file (in `src/main/resources`), see the
the http://docs.spring.io/spring-boot/docs/{spring_boot_version}/reference/htmlsingle/#production-ready-endpoints[documentation about the endpoints].

== View Spring Boot's Starters

You have seen some of
http://docs.spring.io/spring-boot/docs/{spring_boot_version}/reference/htmlsingle/#using-boot-starter[Spring Boot's "`starters`"].
You can see them all
https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-starters[here in source code].

== JAR Support

The last example showed how Spring Boot lets you wire beans that you may not be aware you
need. It also showed how to turn on convenient management services.

However, Spring Boot does more than that. It supports not only traditional WAR file
deployments but also lets you put together executable JARs, thanks to Spring Boot's loader
module. The various guides demonstrate this dual support through the
`spring-boot-gradle-plugin` and `spring-boot-maven-plugin`.


== Summary

Congratulations! You built a simple web application with Spring Boot and learned how it
can ramp up your development pace. You also turned on some handy production services.
This is only a small sampling of what Spring Boot can do. See
http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle[Spring Boot's online docs]
for much more information.

== See Also

The following guides may also be helpful:

* https://spring.io/guides/gs/securing-web/[Securing a Web Application]
* https://spring.io/guides/gs/serving-web-content/[Serving Web Content with Spring MVC]

include::https://raw.githubusercontent.com/spring-guides/getting-started-macros/main/footer.adoc[]
